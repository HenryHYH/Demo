// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HelloWeb.MessageSystem.OpenSearch
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for OpenSearchAPI.
    /// </summary>
    public static partial class OpenSearchAPIExtensions
    {
            /// <summary>
            /// 执行添加文档操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            public static DocumentResponse AddDocumentUsingPOST(this IOpenSearchAPI operations, DocumentRequest request)
            {
                return Task.Factory.StartNew(s => ((IOpenSearchAPI)s).AddDocumentUsingPOSTAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行添加文档操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DocumentResponse> AddDocumentUsingPOSTAsync(this IOpenSearchAPI operations, DocumentRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDocumentUsingPOSTWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 执行删除文档操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            public static DocumentResponse DeleteDocumentUsingPOST(this IOpenSearchAPI operations, DocumentRequest request)
            {
                return Task.Factory.StartNew(s => ((IOpenSearchAPI)s).DeleteDocumentUsingPOSTAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行删除文档操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DocumentResponse> DeleteDocumentUsingPOSTAsync(this IOpenSearchAPI operations, DocumentRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDocumentUsingPOSTWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 执行查询操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            public static SearchResponse SearchUsingPOST(this IOpenSearchAPI operations, SearchRequest request)
            {
                return Task.Factory.StartNew(s => ((IOpenSearchAPI)s).SearchUsingPOSTAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行查询操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchResponse> SearchUsingPOSTAsync(this IOpenSearchAPI operations, SearchRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchUsingPOSTWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 执行下拉查询操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            public static SuggestResponse SuggestUsingPOST(this IOpenSearchAPI operations, SuggestRequest request)
            {
                return Task.Factory.StartNew(s => ((IOpenSearchAPI)s).SuggestUsingPOSTAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行下拉查询操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SuggestResponse> SuggestUsingPOSTAsync(this IOpenSearchAPI operations, SuggestRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuggestUsingPOSTWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 执行更新文档操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            public static DocumentResponse UpdateDocumentUsingPOST(this IOpenSearchAPI operations, DocumentRequest request)
            {
                return Task.Factory.StartNew(s => ((IOpenSearchAPI)s).UpdateDocumentUsingPOSTAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行更新文档操作
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// 请求实体
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DocumentResponse> UpdateDocumentUsingPOSTAsync(this IOpenSearchAPI operations, DocumentRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentUsingPOSTWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
